{"version":3,"sources":["config.tsx","pages/Dashboard/Actions/index.tsx","helpers/useContractValue.ts","../node_modules/@elrondnetwork/bls-wasm sync /^/.//.*/.js$","context/reducer.ts","context/state.ts","context/index.tsx","components/PageTitle/index.tsx","pages/Dashboard/TopInfo.tsx","apiRequests/index.tsx","pages/Dashboard/Transactions/txStatus.tsx","pages/Dashboard/Transactions/StatusIcon.tsx","pages/Dashboard/Transactions/TransactionsList.tsx","pages/Dashboard/Transactions/index.tsx","pages/Dashboard/index.tsx","assets/img/twitter.svg","assets/img/discord.svg","assets/img/exit.svg","assets/img/logo.png","pages/Home/Navbar/index.tsx","my_constants.tsx","pages/Home/Card/Footer/index.tsx","pages/Home/Card/MintCard/InputSteppers/index.tsx","pages/Home/Card/MintCard/MintWarning/index.tsx","pages/Home/Card/MintCard/index.tsx","pages/Home/Card/TextCard/index.tsx","components/Login/login.tsx","assets/img/heart.svg","assets/img/collection.gif","pages/Home/Card/ConnectWalletCard/index.tsx","pages/Home/Card/index.tsx","assets/img/banner.png","pages/Home/index.tsx","pages/Transaction/index.tsx","routes.ts","components/Layout/Footer/index.tsx","components/Layout/index.tsx","pages/PageNotFound/index.tsx","App.tsx","index.tsx"],"names":["contractAddress","dAppName","projectName","environment","dropName","Actions","account","useGetAccountInfo","hasPendingTransactions","useGetPendingTransactions","network","useGetNetworkConfig","address","React","secondsLeft","setSecondsLeft","hasPing","setHasPing","setTransactionSessionId","interval","setInterval","existing","clearInterval","query","Query","Address","func","ContractFunction","args","AddressValue","ProxyProvider","apiAddress","queryContract","then","returnData","encoded","undefined","decoded","Buffer","from","toString","parseInt","catch","err","console","error","sendTransactions","transactionServices","sendPingTransaction","a","pingTransaction","value","data","receiver","refreshAccount","transactions","transactionsDisplayInfo","processingMessage","errorMessage","successMessage","redirectAfterSign","sessionId","sendPongTransaction","pongTransaction","pongAllowed","notAllowedClass","timeRemaining","moment","startOf","seconds","format","className","onClick","icon","faArrowUp","href","faArrowDown","useContractValue","functionName","defaultValue","useState","setValue","useEffect","parsed","isNaN","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","reducer","state","action","type","showLogin","message","show","title","text","danger","onHide","initialState","Context","Dispatch","ContextProvider","children","dispatch","Provider","useContext","context","useDispatch","withPageTitle","Component","Memoized","memo","document","TopInfo","Denominate","balance","fetchTransactions","url","timeout","axios","get","params","sender","condition","size","success","getTransactions","txStatus","pending","notExecuted","fail","StatusIcon","Icon","tx","incomingTransaction","status","faBan","faTimes","sortByDate","b","timestamp","fakeSender","TransactionList","doubleOwnTransactions","filter","blockHash","sortedTransactions","length","el","sort","i","explorerAddress","txHash","target","Trim","unix","decimals","Transactions","useGetActiveTransactionsStatus","hasActiveTransactions","transactionsFetched","setState","TransactionsList","PageState","faExchangeAlt","Dashboard","Navbar","isLoggedIn","substring","Boolean","src","logo","rel","discord","twitter","logout","routeNames","home","exit","contractGetterNames","MintCardFooter","props","ownedNFT","remainingNFTAmount","totalNFT","InputSteppers","minValue","Number","NEGATIVE_INFINITY","maxValue","POSITIVE_INFINITY","onChange","_setValue","newValue","num","min","max","Math","plusButtonFill","minusButtonFill","plusButtonClass","minusButtonClass","width","height","viewBox","fill","xmlns","cx","cy","r","stroke","strokeWidth","x","y","transform","MintWarning","header","paragraph","MintCard","nftInCart","setNftInCart","nftPrice","ownedNft","maxPerWallet","sendMintTransaction","totalMintAmount","minTx","TextCard","_desc","_g","Login","ExtensionLoginButton","DappUI","WebWalletLoginButton","LedgerLoginButton","WalletConnectLoginButton","useGetLoginInfo","maiarExtension","setMaiarExtension","ref","useRef","window","elrondWallet","classNameMaiarExtension","push","Modal","centered","Header","closeButton","Body","Title","callbackRoute","loginButtonText","dashboard","ConnectWalletCard","button","isSoldout","log","collectionGif","Card","remainingNFT","nftBalance","TEXT_MAX_PER_WALLET_REACHED","TEXT_SOLDOUT","component","URLSearchParams","location","search","trim","maxPerWalletReached","getCardComponent","Home","momochi","alt","Transaction","useLocation","fromEntries","faCheck","iconClass","description","to","transaction","unlock","ledger","walletconnect","mappedRoutes","path","authenticatedRoute","route","requiresAuth","wrappedComponent","_excluded","_extends","assign","arguments","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgHeart","_ref","svgRef","titleId","xmlnsXlink","fillRule","d","ForwardRef","Footer","Layout","routes","unlockRoute","PageNotFound","pathname","faSearch","TransactionsToastList","SignTransactionsModals","NotificationModal","UnlockPage","DappCorePages","App","customNetworkConfig","name","apiTimeout","completedTransactionsDelay","element","loginRoute","index","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.8902be3e.chunk.js","sourcesContent":["export const contractAddress =\n  'erd1qqqqqqqqqqqqqpgquc9dyknaxls6wc65mu37ma64p26d8us7hleq44hkpq';\n\nexport const dAppName = 'Momochi Ninja Dapp';\nexport const projectName = 'Momochi Ninja';\nexport const environment = 'devnet';\nexport const dropName = 'Presale';\n","import * as React from 'react';\nimport {\n  transactionServices,\n  useGetAccountInfo,\n  useGetPendingTransactions,\n  refreshAccount,\n  useGetNetworkConfig\n} from '@elrondnetwork/dapp-core';\nimport {\n  Address,\n  AddressValue,\n  ContractFunction,\n  ProxyProvider,\n  Query\n} from '@elrondnetwork/erdjs';\nimport { faArrowUp, faArrowDown } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport moment from 'moment';\nimport { contractAddress } from 'config';\n\nconst Actions = () => {\n  const account = useGetAccountInfo();\n  const { hasPendingTransactions } = useGetPendingTransactions();\n  const { network } = useGetNetworkConfig();\n  const { address } = account;\n\n  const [secondsLeft, setSecondsLeft] = React.useState<number>();\n  const [hasPing, setHasPing] = React.useState<boolean>();\n  const /*transactionSessionId*/ [, setTransactionSessionId] = React.useState<\n      string | null\n    >(null);\n\n  const mount = () => {\n    if (secondsLeft) {\n      const interval = setInterval(() => {\n        setSecondsLeft((existing) => {\n          if (existing) {\n            return existing - 1;\n          } else {\n            clearInterval(interval);\n            return 0;\n          }\n        });\n      }, 1000);\n      return () => {\n        clearInterval(interval);\n      };\n    }\n  };\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  React.useEffect(mount, [hasPing]);\n\n  React.useEffect(() => {\n    const query = new Query({\n      address: new Address(contractAddress),\n      func: new ContractFunction('getTimeToPong'),\n      args: [new AddressValue(new Address(address))]\n    });\n    const proxy = new ProxyProvider(network.apiAddress);\n    proxy\n      .queryContract(query)\n      .then(({ returnData }) => {\n        const [encoded] = returnData;\n        switch (encoded) {\n          case undefined:\n            setHasPing(true);\n            break;\n          case '':\n            setSecondsLeft(0);\n            setHasPing(false);\n            break;\n          default: {\n            const decoded = Buffer.from(encoded, 'base64').toString('hex');\n            setSecondsLeft(parseInt(decoded, 16));\n            setHasPing(false);\n            break;\n          }\n        }\n      })\n      .catch((err) => {\n        console.error('Unable to call VM query', err);\n      });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [hasPendingTransactions]);\n\n  const { sendTransactions } = transactionServices;\n\n  const sendPingTransaction = async () => {\n    const pingTransaction = {\n      value: '1000000000000000000',\n      data: 'ping',\n      receiver: contractAddress\n    };\n    await refreshAccount();\n\n    const { sessionId /*, error*/ } = await sendTransactions({\n      transactions: pingTransaction,\n      transactionsDisplayInfo: {\n        processingMessage: 'Processing Ping transaction',\n        errorMessage: 'An error has occured during Ping',\n        successMessage: 'Ping transaction successful'\n      },\n      redirectAfterSign: false\n    });\n    if (sessionId != null) {\n      setTransactionSessionId(sessionId);\n    }\n  };\n\n  const sendPongTransaction = async () => {\n    const pongTransaction = {\n      value: '0',\n      data: 'pong',\n      receiver: contractAddress\n    };\n    await refreshAccount();\n\n    const { sessionId /*, error*/ } = await sendTransactions({\n      transactions: pongTransaction,\n      transactionsDisplayInfo: {\n        processingMessage: 'Processing Pong transaction',\n        errorMessage: 'An error has occured during Pong',\n        successMessage: 'Pong transaction successful'\n      },\n      redirectAfterSign: false\n    });\n    if (sessionId != null) {\n      setTransactionSessionId(sessionId);\n    }\n  };\n\n  const pongAllowed = secondsLeft === 0 && !hasPendingTransactions;\n  const notAllowedClass = pongAllowed ? '' : 'not-allowed disabled';\n\n  const timeRemaining = moment()\n    .startOf('day')\n    .seconds(secondsLeft || 0)\n    .format('mm:ss');\n\n  return (\n    <div className='d-flex mt-4 justify-content-center'>\n      {hasPing !== undefined && (\n        <>\n          {hasPing && !hasPendingTransactions ? (\n            <div className='action-btn' onClick={sendPingTransaction}>\n              <button className='btn'>\n                <FontAwesomeIcon icon={faArrowUp} className='text-primary' />\n              </button>\n              <a href='/' className='text-white text-decoration-none'>\n                Ping\n              </a>\n            </div>\n          ) : (\n            <>\n              <div className='d-flex flex-column'>\n                <div\n                  {...{\n                    className: `action-btn ${notAllowedClass}`,\n                    ...(pongAllowed ? { onClick: sendPongTransaction } : {})\n                  }}\n                >\n                  <button className={`btn ${notAllowedClass}`}>\n                    <FontAwesomeIcon\n                      icon={faArrowDown}\n                      className='text-primary'\n                    />\n                  </button>\n                  <span className='text-white'>\n                    {pongAllowed ? (\n                      <a href='/' className='text-white text-decoration-none'>\n                        Pong\n                      </a>\n                    ) : (\n                      <>Pong</>\n                    )}\n                  </span>\n                </div>\n                {!pongAllowed && !hasPendingTransactions && (\n                  <span className='opacity-6 text-white'>\n                    {timeRemaining} until able to Pong\n                  </span>\n                )}\n              </div>\n            </>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Actions;\n","import React from 'react';\nimport { useState, useEffect } from 'react';\nimport { useGetNetworkConfig } from '@elrondnetwork/dapp-core';\nimport {\n    Address,\n    AddressValue,\n    ContractFunction,\n    ProxyProvider,\n    Query,\n} from '@elrondnetwork/erdjs';\n\nimport { contractAddress } from 'config';\n\nfunction useContractValue(functionName: string, args: any = [], defaultValue = 0) {\n    const [value, setValue] = React.useState<number>(defaultValue);\n    const { network } = useGetNetworkConfig();\n\n    useEffect(() => {\n        const query = new Query({\n            address: new Address(contractAddress),\n            func: new ContractFunction(functionName),\n            args: args,\n        });\n        const proxy = new ProxyProvider(network.apiAddress);\n        proxy\n            .queryContract(query)\n            .then(({ returnData }) => {\n                const [encoded] = returnData;\n\n                if (encoded == undefined || encoded == '') return;\n\n                const decoded = Buffer.from(encoded, 'base64').toString('hex');\n                const parsed = parseInt(decoded, 16);\n\n                if (isNaN(parsed) == false) {\n                    setValue(parsed);\n                }\n                else {\n                    //console.error('Failed to parse output from function', functionName, '. Raw output '' + encoded + ''. Args was '', args, ''.');\n                }\n            })\n            .catch((err) => {\n                console.error('Unable to call VM query', err);\n            });\n    });\n\n    return value;\n}\n\nexport default useContractValue;","var map = {\n\t\"./bls.js\": 334,\n\t\"./bls_c.js\": 360\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 649;","import { StateType, MessageType } from './state';\n\nexport type ActionType =\n    | {type: 'showLogin' | 'hideLogin'}\n    | {\n        type: 'showMessage';\n        title: MessageType['title'];\n        text: MessageType['text'];\n        danger?: MessageType['danger'];\n        onHide?: MessageType['onHide'];\n    }\n    | { type: 'hideMessage' };\n\nexport function reducer(state: StateType, action: ActionType) {\n    switch (action.type) {\n        case 'showLogin': {\n            const newState = {\n                ...state,\n                showLogin: !state.showLogin\n            };\n            return newState;\n        }\n        case 'hideLogin': {\n            const newState = {\n                ...state,\n                showLogin: false\n            };\n            return newState;\n        }\n        case 'showMessage': {\n            return {\n                ...state,\n                message: {\n                    show: true,\n                    title: action.title,\n                    text: action.text,\n                    danger: action.danger,\n                    onHide: action.onHide,\n                }\n            };\n        }\n        case 'hideMessage': {\n            return {\n                ...state,\n                message: {\n                    show: false\n                }\n            };\n        }\n        default: {\n            throw new Error(`Unhandled action type: ${action}`);\n        }\n    }\n}\n","export interface MessageType {\n  show: boolean;\n  title?: string;\n  text?: string;\n  danger?: boolean;\n  onHide?: any;\n}\nexport interface StateType {\n  showLogin: boolean;\n  message?: MessageType;\n}\n\nconst initialState = (): StateType => {\n  return {\n      showLogin: false,\n      message: {show: false}\n  };\n};\n\nexport default initialState;","import * as React from 'react';\nimport { ActionType, reducer } from './reducer';\nimport initialState, { StateType } from './state';\n\ntype DispatchType = (action: ActionType) => void;\nexport interface ContextType {\n  children: React.ReactNode;\n}\n\nconst Context = React.createContext<StateType | undefined>(undefined);\nconst Dispatch = React.createContext<DispatchType | undefined>(undefined);\n\nfunction ContextProvider({ children }: ContextType) {\n  const [state, dispatch] = React.useReducer(reducer, initialState());\n  return (\n    <Context.Provider value={state}>\n      <Dispatch.Provider value={dispatch}>{children}</Dispatch.Provider>\n    </Context.Provider>\n  );\n}\n\nfunction useContext() {\n  const context = React.useContext(Context);\n  if (context === undefined) {\n    throw new Error('useState must be used within a Context.Provider');\n  }\n  return context;\n}\n\nfunction useDispatch() {\n  const context = React.useContext(Dispatch);\n  if (context === undefined) {\n    throw new Error('useDispatch must be used within a Dispatch.Provider');\n  }\n  return context;\n}\n\nexport { ContextProvider, useContext, useDispatch };\n","import React, { useEffect, memo } from 'react';\n\nconst withPageTitle = (title: string, Component: React.ComponentType) => () => {\n  const Memoized = memo(Component);\n\n  useEffect(() => {\n    document.title = title;\n  }, []);\n  return <Memoized />;\n};\n\nexport default withPageTitle;\n","import * as React from 'react';\nimport { useGetAccountInfo, DappUI } from '@elrondnetwork/dapp-core';\nimport { contractAddress } from 'config';\n\nconst TopInfo = () => {\n  const { address, account } = useGetAccountInfo();\n\n  return (\n    <div className='text-white' data-testid='topInfo'>\n      <div className='mb-1'>\n        <span className='opacity-6 mr-1'>Your address:</span>\n        <span data-testid='accountAddress'> {address}</span>\n      </div>\n      <div className='mb-4'>\n        <span className='opacity-6 mr-1'>Contract address:</span>\n        <span data-testid='contractAddress'> {contractAddress}</span>\n      </div>\n      <div>\n        <h3 className='py-2'>\n          <DappUI.Denominate value={account.balance} data-testid='balance' />\n        </h3>\n      </div>\n    </div>\n  );\n};\n\nexport default TopInfo;\n","import axios from 'axios';\n\ninterface GetLatestTransactionsType {\n  apiAddress: string;\n  address: string;\n  contractAddress: string;\n  timeout: number;\n  page?: number;\n  url?: string;\n}\n\nconst fetchTransactions = (url: string) =>\n  async function getTransactions({\n    apiAddress,\n    address,\n    contractAddress,\n    timeout\n  }: GetLatestTransactionsType) {\n    try {\n      const { data } = await axios.get(`${apiAddress}${url}`, {\n        params: {\n          sender: address,\n          receiver: contractAddress,\n          condition: 'must',\n          size: 25\n        },\n        timeout\n      });\n\n      return {\n        data: data,\n        success: data !== undefined\n      };\n    } catch (err) {\n      return {\n        success: false\n      };\n    }\n  };\n\nexport const getTransactions = fetchTransactions('/transactions');\nexport const getTransactionsCount = fetchTransactions('/transactions/count');\n","const txStatus = {\n  pending: 'Pending',\n  notExecuted: 'Not Executed',\n  success: 'Success',\n  fail: 'Failed'\n};\n\nexport default txStatus;\n","import React from 'react';\nimport {\n  faArrowUp,\n  faArrowDown,\n  faBan,\n  faTimes\n} from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport txStatus from './txStatus';\nimport { TransactionType } from './types';\n\ninterface StatusIconType {\n  tx: TransactionType;\n  incomingTransaction: boolean;\n}\n\nconst StatusIcon = ({ tx, incomingTransaction }: StatusIconType) => {\n  let Icon;\n  switch (tx.status) {\n    case txStatus.notExecuted:\n      Icon = () => <FontAwesomeIcon icon={faBan} className='text-danger' />;\n      break;\n    case txStatus.fail:\n      Icon = () => <FontAwesomeIcon icon={faTimes} className='text-danger' />;\n      break;\n    case txStatus.success:\n      Icon = () => (\n        <FontAwesomeIcon\n          icon={incomingTransaction ? faArrowUp : faArrowDown}\n          className='text-secondary'\n        />\n      );\n      break;\n    default:\n      Icon = () => (\n        <FontAwesomeIcon\n          icon={incomingTransaction ? faArrowUp : faArrowDown}\n          className='text-secondary'\n        />\n      );\n  }\n  return (\n    <i className='m-3 circle'>\n      <Icon />\n    </i>\n  );\n};\n\nexport default StatusIcon;\n","import React from 'react';\nimport {\n  useGetAccountInfo,\n  DappUI,\n  useGetNetworkConfig\n} from '@elrondnetwork/dapp-core';\nimport moment from 'moment';\nimport StatusIcon from './StatusIcon';\nimport txStatus from './txStatus';\nimport { TransactionType } from './types';\n\nfunction sortByDate(a: TransactionType, b: TransactionType) {\n  if (a.timestamp < b.timestamp) {\n    return 1;\n  }\n  if (a.timestamp > b.timestamp) {\n    return -1;\n  }\n  return 0;\n}\n\nconst fakeSender =\n  'erd000000000000000000000000000000000000000000000000000000000a';\n\nconst TransactionList = ({\n  transactions\n}: {\n  transactions: TransactionType[];\n}) => {\n  const { network } = useGetNetworkConfig();\n  const account = useGetAccountInfo();\n  const incoming = (sender: string) =>\n    sender === account.address && sender !== fakeSender;\n\n  // eslint-disable-next-line\n  const doubleOwnTransactions = transactions\n    .filter((tx) => tx.sender === tx.receiver && tx.blockHash !== '')\n    .map((tx) => ({ ...tx, sender: fakeSender, timestamp: tx.timestamp + 1 }));\n\n  const sortedTransactions: TransactionType[] = (\n    [\n      ...transactions,\n      ...(doubleOwnTransactions.length > 0 ? doubleOwnTransactions : [])\n    ].filter((el: any) => el !== undefined) as any\n  ).sort(sortByDate);\n\n  return (\n    <div className='p-3 mt-3'>\n      <h4 className='mb-3 font-weight-normal'>Smart Contract Transactions</h4>\n      <div className='table-responsive'>\n        <table className='transactions table pb-3'>\n          <thead>\n            <tr className='bg-light'>\n              <th className='border-0 font-weight-normal'></th>\n              <th className='border-0 font-weight-normal'>Tx hash</th>\n              <th className='border-0 font-weight-normal'>Date</th>\n              <th className='border-0 font-weight-normal'>Amount</th>\n            </tr>\n          </thead>\n          <tbody data-testid='transactionsList'>\n            {sortedTransactions.map((tx: TransactionType, i) => {\n              const incomingTransaction = incoming(tx.sender);\n\n              return (\n                <tr key={tx.txHash + i}>\n                  <td>\n                    <div\n                      className='transaction-icon bg-light d-flex align-items-center justify-content-center'\n                      title={txStatus[tx.status]}\n                    >\n                      <StatusIcon\n                        tx={tx}\n                        incomingTransaction={incomingTransaction}\n                      />\n                    </div>\n                  </td>\n                  <td className='transaction-hash'>\n                    <a\n                      href={`${network.explorerAddress}/transactions/${tx.txHash}`}\n                      {...{\n                        target: '_blank'\n                      }}\n                      title='View in Explorer'\n                    >\n                      <DappUI.Trim data-testid='txHash' text={tx.txHash} />\n                    </a>\n                  </td>\n                  <td>\n                    {moment.unix(tx.timestamp).format('MMM Do YYYY, h:mm A')}\n                  </td>\n                  <td className='text-right'>\n                    {tx.value === '0' ? (\n                      ''\n                    ) : (\n                      <>{tx.sender === account.address ? '-' : '+'}</>\n                    )}\n                    <DappUI.Denominate value={tx.value} decimals={2} />\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n      <div className='d-flex justify-content-center'>\n        <a\n          href={`${network.explorerAddress}/address/${account.address}`}\n          {...{\n            target: '_blank'\n          }}\n        >\n          See all transactions\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default TransactionList;\n","import React from 'react';\nimport {\n  useGetAccountInfo,\n  DappUI,\n  transactionServices,\n  refreshAccount,\n  useGetNetworkConfig\n} from '@elrondnetwork/dapp-core';\nimport { faExchangeAlt } from '@fortawesome/free-solid-svg-icons';\nimport { getTransactions } from 'apiRequests';\nimport { contractAddress } from 'config';\nimport TransactionsList from './TransactionsList';\nimport { StateType } from './types';\n\nconst Transactions = () => {\n  const {\n    network: { apiAddress }\n  } = useGetNetworkConfig();\n  const { success, fail, hasActiveTransactions } =\n    transactionServices.useGetActiveTransactionsStatus();\n\n  const [state, setState] = React.useState<StateType>({\n    transactions: [],\n    transactionsFetched: undefined\n  });\n  const account = useGetAccountInfo();\n\n  const fetchData = () => {\n    if (success || fail || !hasActiveTransactions) {\n      getTransactions({\n        apiAddress,\n        address: account.address,\n        timeout: 3000,\n        contractAddress\n      }).then(({ data, success: transactionsFetched }) => {\n        refreshAccount();\n        setState({\n          transactions: data,\n          transactionsFetched\n        });\n      });\n    }\n  };\n\n  React.useEffect(fetchData, [success, fail, hasActiveTransactions]);\n\n  const { transactions } = state;\n\n  return transactions.length > 0 ? (\n    <TransactionsList transactions={transactions} />\n  ) : (\n    <div className='my-5'>\n      <DappUI.PageState\n        icon={faExchangeAlt}\n        className='text-muted fa-3x'\n        title='No Transactions'\n      />\n    </div>\n  );\n};\n\nexport default Transactions;\n","import * as React from 'react';\nimport Actions from './Actions';\nimport TopInfo from './TopInfo';\nimport Transactions from './Transactions';\n\nconst Dashboard = () => {\n  return (\n    <div className='container py-4'>\n      <div className='row'>\n        <div className='col-12 col-md-10 mx-auto'>\n          <div className='card shadow-sm rounded border-0'>\n            <div className='card-body p-1'>\n              <div className='card rounded border-0 bg-primary'>\n                <div className='card-body text-center p-4'>\n                  <TopInfo />\n                  <Actions />\n                </div>\n              </div>\n              <Transactions />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;\n","export default __webpack_public_path__ + \"static/media/twitter.58c09e11.svg\";","export default __webpack_public_path__ + \"static/media/discord.37d785be.svg\";","export default __webpack_public_path__ + \"static/media/exit.f6df120d.svg\";","export default __webpack_public_path__ + \"static/media/logo.73d2e2c6.png\";","import React from 'react';\nimport { logout, useGetAccountInfo } from '@elrondnetwork/dapp-core';\nimport { Navbar as BsNavbar, NavItem, Nav } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { dAppName } from 'config';\nimport { routeNames } from 'routes';\nimport { ReactComponent as ElrondLogo } from './../../../assets/img/elrond.svg';\nimport twitter from '../../../assets/img/twitter.svg';\nimport discord from '../../../assets/img/discord.svg';\nimport exit from '../../../assets/img/exit.svg';\nimport logo from '../../../assets/img/logo.png';\nimport './Navbar.scss';\n\ninterface NavBarType {\n  onClickLogin?: any;\n}\nconst Navbar = () => {\n  const { address } = useGetAccountInfo();\n  const visibleAddress = '....' + address.substring(address.length - 10);\n  const handleLogout = () => {\n    logout(`${routeNames.home}`);\n  };\n\n  const isLoggedIn = Boolean(address);\n\n  return (\n    <header className='d-flex justify-content-between align-items-center flex-nowrap'>\n        <div className='d-flex align-items-center h-100 flex-shrink-1 flew-grow-0'> \n            <img src={logo} className='logo' />\n        </div>\n        <div className='d-flex align-items-center h-100 flex-shrink-1 flew-grow-0'>\n            <p className='ml-4'>\n            𝕸𝖔𝖒𝖔𝖈𝖍𝖎 𝕹𝖎𝖓𝖏𝖆&apos;𝖘\n            </p>\n        </div>\n\n        <div className='d-flex align-items-center h-100 flex-shrink-1 flew-grow-0'>\n            <a href='https://discord.gg/4vWuZJ7u4S' target='_blank' rel='noopener noreferrer' >\n                <img className='icon' src={discord} />\n            </a>\n\n            <a href='https://twitter.com/MomochiNinja' target='_blank' rel='noopener noreferrer'>\n                <img className='icon' src={twitter} />\n            </a>\n            {isLoggedIn && (\n              <a href=\"#\" onClick={handleLogout} target='_self' rel='noopener noreferrer'>\n                  <img className='icon' src={exit} />\n              </a>\n            )}\n        </div>\n    </header >\n    // <BsNavbar className='bg-white border-bottom px-4 py-3'>\n    //   <div className='container-fluid'>\n    //     <Link\n    //       className='d-flex align-items-center navbar-brand mr-0'\n    //       //to={isLoggedIn ? routeNames.dashboard : routeNames.home}\n    //       to={routeNames.home}\n    //     >\n    //       <ElrondLogo className='elrond-logo' />\n    //       <span className='dapp-name text-muted'>{dAppName}</span>\n    //     </Link>\n\n    //     <Nav className='ml-auto'>\n    //       {isLoggedIn && (\n    //         <NavItem>\n    //           {visibleAddress}\n    //           <button className='btn btn-link' onClick={handleLogout}>\n    //             Logout\n    //           </button>\n    //         </NavItem>\n    //       )}\n    //       {!isLoggedIn && (\n    //         <NavItem>\n    //           <button className='btn btn-link' onClick={handleLogin}>\n    //             Login\n    //           </button>\n    //         </NavItem>\n    //         // <Link\n    //         //   to={routeNames.unlock}\n    //         //   className='btn btn-primary mt-3 text-white'\n    //         //   data-testid='loginBtn'\n    //         // >\n    //         //   Login\n    //         // </Link>\n    //       )}\n    //     </Nav>\n    //   </div>\n    // </BsNavbar>\n  );\n};\n\nexport default Navbar;\n","export const contractGetterNames = {\n    remainingNFT: 'getTotalNFTLeft',//getDropNFTLeft\n    maxPerWallet: 'getNFTLimitPerAddressTotal', //getNFTLimitPerAddressPerDrop\n    maxPerTransaction: 'getMaxReservationPerTransactions',\n    ownedNFT: 'getTotalMintedPerAddress', //getTotalMintedPerAddressPerDrop\n    nftPrice: 'getNFTPrice',\n    totalAmount: 'getTotalNFTAmount',//getTotalNFTAmountperDrop\n    unlockTimestamp: 'getUnlockTimestamp',\n    unlockWhitelistTimestamp: 'getWhitelistUnlockTimestamp',\n};","import { Address, AddressValue } from '@elrondnetwork/erdjs/out';\nimport { useGetAccountInfo } from '@elrondnetwork/dapp-core';\nimport useContractValue from 'helpers/useContractValue';\nimport { contractGetterNames } from 'my_constants';\nimport * as React from 'react';\nimport './MintCardFooter.scss';\n\n\nconst MintCardFooter = (props: any) => {\n    const { address } = useGetAccountInfo();\n    const ownedNFT = useContractValue(contractGetterNames.ownedNFT, [new AddressValue(new Address(address))], 0);\n    const remainingNFTAmount = useContractValue(contractGetterNames.remainingNFT, [], -1);\n    const totalNFT = useContractValue(contractGetterNames.totalAmount, [], -1);\n\n\n    return <div className={'mint-card-footer w-100' + ' ' + (props.className || '')}>\n        <p className='text-center'>\n            <span className='discret-text'>your balance</span> {ownedNFT > 0 ? ownedNFT : '-'} 🥷<br />\n            {totalNFT > 1 ? ((totalNFT - remainingNFTAmount)) : '-'} / {totalNFT > 0 ? (totalNFT) : '-'} 🥷\n        </p>\n    </div>;\n};\n\nexport default MintCardFooter;","import * as React from 'react';\nimport './InputSteppers.scss';\n\n\ninterface InputSteppersProps {\n    defaultValue: number,\n    minValue: number,\n    maxValue: number,\n    onChange?: (value: number) => void\n}\n\nconst InputSteppers: React.FC<InputSteppersProps> = ({\n    defaultValue = 1,\n    minValue = Number.NEGATIVE_INFINITY,\n    maxValue = Number.POSITIVE_INFINITY,\n    onChange = undefined\n}: InputSteppersProps) => {\n\n    const clamp = (num: number, min: number, max: number) => Math.min(Math.max(num, min), max);\n    const [value, _setValue] = React.useState(defaultValue);\n\n    const setValue = (newValue: number) => {\n\n        newValue = clamp(newValue, minValue, maxValue);\n        _setValue(newValue);\n\n        if (onChange != undefined) {\n            onChange(newValue);\n        }\n    };\n\n    const increment = () => setValue(value + 1);\n    const decrement = () => setValue(value - 1);\n\n    const plusButtonFill = value == maxValue ? '#B8B8B8' : '#fff667';\n    const minusButtonFill = value == minValue ? '#B8B8B8' : '#fff667';\n\n    const plusButtonClass = value == maxValue ? 'disabled' : '';\n    const minusButtonClass = value == minValue ? 'disabled' : '';\n\n    return <div className='input-steppers d-flex justify-content-center  align-items-center'>\n\n        <svg className={minusButtonClass} width='39' height='39' viewBox='0 0 39 39' fill='none' onClick={decrement} xmlns='http://www.w3.org/2000/svg'>\n            <circle cx='19.5' cy='19.5' r='18.5' stroke={minusButtonFill} strokeWidth='2' />\n            <rect x='11' y='19' width='17' height='2' fill={minusButtonFill} />\n        </svg>\n\n        <p className='mx-3'>{value}</p>\n\n        <svg className={plusButtonClass} width='39' height='39' viewBox='0 0 39 39' onClick={increment} fill='none' xmlns='http://www.w3.org/2000/svg'>\n            <circle cx='19.5' cy='19.5' r='18.5' stroke={plusButtonFill} strokeWidth='2' />\n            <rect x='11' y='19' width='17' height='2' fill={plusButtonFill} />\n            <rect x='19' y='28' width='17' height='2' transform='rotate(-90 19 28)' fill={plusButtonFill} />\n        </svg>\n    </div>;\n};\n\nexport default InputSteppers;","import * as React from 'react';\nimport './MintWarning.scss';\n\ninterface WarningProps {\n    header: string,\n    paragraph: string | JSX.Element\n}\n\nconst MintWarning: React.FC<WarningProps> = ({ header, paragraph }: WarningProps) => {\n    return <div className='mint-warning'>\n        <h2>{header}</h2>\n        <p>{paragraph}</p>\n    </div>;\n};\n\nexport default MintWarning;","import { Address, AddressValue, Balance } from '@elrondnetwork/erdjs/out';\nimport { contractGetterNames } from 'my_constants';\nimport * as React from 'react';\nimport MintCardFooter from '../Footer';\nimport {\n    transactionServices,\n    useGetAccountInfo,\n    useGetPendingTransactions,\n    refreshAccount,\n    useGetNetworkConfig\n  } from '@elrondnetwork/dapp-core';\nimport useContractValue from 'helpers/useContractValue';\nimport InputSteppers from './InputSteppers';\nimport './MintCard.scss';\nimport MintWarning from './MintWarning';\nimport { contractAddress } from 'config';\n\nconst MintCard = () => {\n    const { address } = useGetAccountInfo();\n    const [nftInCart, setNftInCart] = React.useState(1);\n    const nftPrice = useContractValue(contractGetterNames.nftPrice, [], -1);\n    const ownedNft = useContractValue(contractGetterNames.ownedNFT, [new AddressValue(new Address(address))]);\n    const maxPerWallet = useContractValue(contractGetterNames.maxPerWallet, [], 2);\n\n\n    const sendMintTransaction = async (nftInCart:number) => {\n        const { sendTransactions } = transactionServices;\n        const totalMintAmount = (nftInCart.toString(16).length < 2 ? '0' : '') +nftInCart.toString(16);\n    \n        const minTx = {\n          value: (nftPrice * nftInCart).toString(),\n          data: 'mint@' + totalMintAmount,\n          receiver: contractAddress\n        };\n        await refreshAccount();\n    \n        const { sessionId /*, error*/ } = await sendTransactions({\n          transactions: minTx,\n          transactionsDisplayInfo: {\n            processingMessage: 'Processing Mint transaction',\n            errorMessage: 'An error has occured during Minting',\n            successMessage: 'Mint transaction successful'\n          },\n          redirectAfterSign: false\n        });\n        /*if (sessionId != null) {\n          setTransactionSessionId(sessionId);\n        }*/\n      };\n\n    return <div className='mint-card'>\n        {(ownedNft + nftInCart > maxPerWallet) &&\n            <MintWarning header='Warning' paragraph={<p>Sorry. You can&apos;t mint more at this time.<br />The limit is set to {maxPerWallet} 🥷 per wallet.</p>} />\n        }\n\n        <h1 className='text-center'>𝕸𝖎𝖓𝖙 𝖞𝖔𝖚𝖗 𝖓𝖎𝖓𝖏𝖆&apos;𝖘!</h1>\n\n        <InputSteppers defaultValue={1} minValue={1} maxValue={maxPerWallet - ownedNft} onChange={setNftInCart} />\n\n        <button className='mt-3 mb-2 w-100' onClick={(e) => sendMintTransaction(nftInCart)}>Mint</button>\n\n        <div className='d-flex justify-content-between'>\n            <p>{nftPrice > 0 ? nftPrice / 10 ** 18 : '-'} EGLD per 🥷</p>\n            <p><span className='discret-text'>Total</span> {nftPrice > 0 ? nftPrice * nftInCart / 10 ** 18 : '-'} EGLD</p>\n        </div>\n\n        <MintCardFooter />\n    </div >;\n};\n\nexport default MintCard;","import * as React from 'react';\nimport MintCardFooter from '../Footer';\nimport './TextCard.scss';\n\ninterface TextCardProps {\n    paragraph: JSX.Element\n}\n\nconst TextCard: React.FC<TextCardProps> = (props: TextCardProps) => {\n    return <div className='text-card pt-5'>\n        <p className='text-center'>{props.paragraph}</p>\n        <MintCardFooter />\n    </div>;\n};\n\nexport default TextCard;","import React, { useState, useEffect } from 'react';\nimport { DappUI, useGetLoginInfo } from '@elrondnetwork/dapp-core';\nimport { Modal } from 'react-bootstrap';\nimport { routeNames } from '../../routes';\n//import './styles.scss';\n\ninterface LoginMethodType {\n  icon?: any;\n  label?: string;\n  onSelect?: any;\n  link?: string;\n  className?: string;\n  style?: any;\n  comment?: string;\n}\n\nconst LoginMethod = ({\n  icon,\n  label,\n  onSelect,\n  link,\n  className,\n  style,\n  comment\n}: LoginMethodType) => {\n  function handleOnSelect(e: React.MouseEvent) {\n    e.preventDefault();\n    if (!!onSelect) {\n      onSelect(e);\n    }\n  }\n\n  const currentClassName =\n    'login-method container' + (className ? ' ' + className : '');\n\n  const body = <div className = 'row d-flex align-items-center'>\n                    <div className='col-2'>\n                        {icon}\n                    </div>\n                    <div className='col text-start'>\n                        {label}\n                        {comment && <p className='text-muted' style={{fontSize: '11px'}}><sup>*</sup>{comment}</p>}\n                    </div>\n                    <div className='col-2 text-end'>\n                        {/* <span><ArrowRightIcon /></span> */}\n                    </div>\n                </div>;\n\n    return (\n        <div className={currentClassName} style={style}>\n            {link? \n            <a href={link||'#'} style={{textDecoration:'none'}}>\n                {body}            \n            </a>\n            : \n            <a href='#' onClick={handleOnSelect} style={{textDecoration:'none'}}>\n                {body}            \n            </a>\n            }\n        </div>\n    );\n};\n\nfunction isMaiarExtensionInstalled(): boolean {\n    return (!!window && !!window.elrondWallet);\n}\n\ninterface LoginType {\n    show: boolean;\n    onHide?: any;\n}\n\nconst Login = ({show, onHide}: LoginType)=> {\n    const callbackRoute = '/';\n    const {\n        ExtensionLoginButton,\n        WebWalletLoginButton,\n        LedgerLoginButton,\n        WalletConnectLoginButton\n      } = DappUI;\n\n    const { isLoggedIn } = useGetLoginInfo();\n    if(isLoggedIn){\n        show = false;\n    }\n    \n    const [maiarExtension, setMaiarExtension] = useState<boolean>(false);\n    const ref = React.useRef(null);\n\n\n    useEffect(() => {\n        setMaiarExtension(isMaiarExtensionInstalled());\n    }, []);\n\n    const classNameMaiarExtension = ['border-bottom'];\n    if (maiarExtension) {\n        classNameMaiarExtension.push('pb-3 pt-3');\n    } else {\n        classNameMaiarExtension.push('pb-1 pt-2');\n    }\n\n\n\n\n\n    return (\n        <Modal ref={ref} show={show} onHide={onHide} className='login-qo-w' aria-labelledby='contained-modal-title-vcenter' centered>\n            <Modal.Header closeButton />\n            <Modal.Body className='text-center'>\n                {/* <EnterIcon className='mb-3'/> */}\n                <Modal.Title>Please select your login method</Modal.Title>\n                <div className='container ps-5 pe-5 pt-4 pb-4'>\n                    {/* <!--LoginMethod link={routeNames.walletconnect} icon={MaiarAppIcon} label='Maiar App' className='pb-3 border-bottom'/>\n                    <LoginMethod onSelect={extensionLogin} icon={MaiarExtensionIcon} label='Maiar Extension' className={classNameMaiarExtension.join(' ')} comment={!maiarExtension?t('installMaiarExtension'): undefined}/>\n                    <LoginMethod link={routeNames.ledger} icon={LedgerIcon} label='Ledger' className='pb-3 pt-3 border-bottom'/>\n                    <LoginMethod onSelect={webWalletLogin} icon={ElrondWebWalletIcon} label='Web Wallet' className='pb-3 pt-3/> */}\n                    <ExtensionLoginButton\n                    callbackRoute={routeNames.home}\n                    loginButtonText={'Extension'}\n                    />\n                    <WebWalletLoginButton\n                    callbackRoute={routeNames.dashboard}\n                    loginButtonText={'Web wallet'}\n                    />\n                    <LedgerLoginButton\n                    loginButtonText={'Ledger'}\n                    callbackRoute={routeNames.dashboard}\n                    className={'test-class_name'}\n                    />\n                    <WalletConnectLoginButton\n                    callbackRoute={routeNames.dashboard}\n                    loginButtonText={'Maiar'}\n                    />\n                </div>\n            </Modal.Body>\n        </Modal>\n    );\n};\n\nexport default Login;","var _desc, _g;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgHeart(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: \"14px\",\n    height: \"12px\",\n    viewBox: \"0 0 14 12\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title === undefined ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, \"heart\") : title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _desc || (_desc = /*#__PURE__*/React.createElement(\"desc\", null, \"Created with Sketch.\")), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"heart\",\n    stroke: \"none\",\n    strokeWidth: 1,\n    fillRule: \"evenodd\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M7.00249318,12 L1.23954171,6.67000631 C0.219967339,5.73025806 -0.214165447,4.32384166 0.101003225,2.98159749 C0.416171897,1.63935333 1.4326464,0.565685745 2.76676674,0.165841807 C4.10088708,-0.234002131 5.54948604,0.100868016 6.56580179,1.04405825 L7.00249318,1.44795492 L7.43918869,1.04405825 C9.01100287,-0.409657356 11.4775242,-0.328715349 12.9483183,1.22484728 C14.4191125,2.77840991 14.3372196,5.21629062 12.7654055,6.67000631 L7.00249318,12 Z\",\n    id: \"Path\",\n    fillRule: \"nonzero\"\n  }))));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgHeart);\nexport default __webpack_public_path__ + \"static/media/heart.8edd3f99.svg\";\nexport { ForwardRef as ReactComponent };","export default __webpack_public_path__ + \"static/media/collection.09eda009.gif\";","\nimport { contractGetterNames } from 'my_constants';\nimport * as React from 'react';\nimport { useContext, useDispatch } from 'context';\nimport useContractValue from 'helpers/useContractValue';\nimport collectionGif from '../../../../assets/img/collection.gif';\nimport './connect-wallet-card.scss';\nimport { dropName } from 'config';\ninterface ConnectWalletType {\n    onClickLogin?: any;\n  }\nconst ConnectWalletCard = () => {\n\n    const { showLogin } = useContext();\n    const dispatch = useDispatch();\n\n    function handleOnClickLogin() {\n        console.log('hola');\n        dispatch( {type: 'showLogin'});\n    }\n\n\n    const remainingNFTAmount = useContractValue(contractGetterNames.remainingNFT);\n    const totalNFT = useContractValue(contractGetterNames.totalAmount);\n    const nftPrice = useContractValue(contractGetterNames.nftPrice);\n\n    //const timeLeft = useCountDownTimer(getAppropriateTimeStamp());\n    \n\n    //const timestampUnlocked = timeLeft.days <= 0 && timeLeft.hours <= 0 && timeLeft.minutes <= 0 && timeLeft.seconds <= 0;\n\n    let button = null;\n\n    const isSoldout = remainingNFTAmount === 0;\n\n    //if (timestampUnlocked) {\n        if (!isSoldout) {\n            button = <button onClick={() => handleOnClickLogin()}>CONNECT WALLET</button>;\n        }\n        else {\n        button = <></>;\n         }\n    // }\n    // else {\n\n    //     // button = <button className='noHover'>Unlocks in {timeLeft.days + 'd ' + timeLeft.hours + 'h ' + timeLeft.minutes + 'm ' + timeLeft.seconds + 's '}</button>;\n    //     button = <button className='noHover'>Unlocks in XXXXX</button>;\n    // }\n\n\n    return <div className='connect-wallet-card d-flex flex-column'>\n        <div className='center'>\n            <img className='mb-4' src={collectionGif} />\n        </div>\n        <div className='d-flex flex-column info align-items-stretch'>\n            <div className='d-flex justify-content-between align-items-center'>\n                <h2>{dropName}</h2>\n\n                <p className='text-right'>\n                    <span className='discret-text'>Price </span>\n                    {nftPrice / 10 ** 18} EGLD\n                </p>\n            </div>\n\n            <p className='text-center remaining-ninjas align-self-stretch h-100 d-flex justify-content-center align-items-center mt-3'>\n                {totalNFT - remainingNFTAmount} / {totalNFT} 🥷\n                {/* 1111 / 1111 */}\n\n                {isSoldout &&\n                    <><br />🎉🎉🎉 SOLD OUT! 🎉🎉🎉</>\n                }\n            </p>\n        </div>\n\n        {button}\n    </div>;\n};\n\nexport default ConnectWalletCard;","import * as React from 'react';\nimport { useGetLoginInfo, useGetAccountInfo } from '@elrondnetwork/dapp-core';\nimport MintCard from './MintCard';\nimport TextCard from './TextCard';\nimport { useContext, useDispatch } from 'context';\nimport useContractValue from 'helpers/useContractValue';\nimport Login from '../../../components/Login/login';\nimport ConnectWalletCard from './ConnectWalletCard';\nimport { contractGetterNames } from 'my_constants';\nimport { Address, AddressValue } from '@elrondnetwork/erdjs/out';\nimport './card.scss';\n\ninterface OptionalClassnameProp {\n    className?: string\n}\n\nconst Card = ({ className = '' }: OptionalClassnameProp) => {\n\n    const dispatch = useDispatch();\n    const { showLogin } = useContext();\n    const { address } = useGetAccountInfo();\n\n    function handleHideLogin() {\n        console.log('adios');\n        dispatch( {type: 'hideLogin'});\n    }\n\n    const remainingNFT = useContractValue(contractGetterNames.remainingNFT, [], -1);\n    const maxPerWallet = useContractValue(contractGetterNames.maxPerWallet, [], 10);\n    const nftBalance = useContractValue(contractGetterNames.ownedNFT, [new AddressValue(new Address(address))]);\n\n    const { isLoggedIn } = useGetLoginInfo();\n    \n    \n    const TEXT_MAX_PER_WALLET_REACHED = <>\n        Hey !<br />\n        <br />\n        You can’t mint more than {maxPerWallet} ninjas with this wallet.<br />\n        <br />\n        Thank you! 🥷\n    </>;\n\n    const TEXT_SOLDOUT = <>\n        Hey !<br />\n        <br />\n        All the ninjas are already sold out.<br />\n        <br />\n        Thank you for your support ! 🥷\n    </>;\n\nconst component = getCardComponent();\n    return <div className={'card-container' + ' ' + className}>\n        <div className='ap-card'></div>\n        <div className='ap-card'></div>\n        <div className='ap-card'>\n            {component}\n        </div >\n        <Login show={showLogin || false} onHide={handleHideLogin} />\n    </div>;\n\n    \n\n    function getCardComponent(): JSX.Element {\n\n        switch (new URLSearchParams(window.location.search).get('debug_card')?.trim()) {\n            case 'mint': return <MintCard />;\n            case 'connect': return <ConnectWalletCard />;\n            case 'soldout': return <TextCard paragraph={TEXT_SOLDOUT} />;\n            case 'max': return <TextCard paragraph={TEXT_MAX_PER_WALLET_REACHED} />;\n        }\n\n        const isSoldout = remainingNFT == 0;\n        const maxPerWalletReached = nftBalance >= maxPerWallet;\n\n        if (isLoggedIn == false) {\n            return <ConnectWalletCard />;\n        }\n        else if (isSoldout == true) {\n            return <TextCard paragraph={TEXT_SOLDOUT} />;\n        }\n        else if (maxPerWalletReached == true) {\n            return <TextCard paragraph={TEXT_MAX_PER_WALLET_REACHED} />;\n        }\n        else {\n            return <MintCard />;\n        }\n    }\n};\n\nexport default Card;\n\n\n","export default __webpack_public_path__ + \"static/media/banner.eb9e543a.png\";","import React, { useEffect, useState } from 'react';\n//import Card from './Card';\nimport { useGetLoginInfo } from '@elrondnetwork/dapp-core';\nimport { useContext, useDispatch } from 'context';\nimport { Link } from 'react-router-dom';\nimport { dAppName } from 'config';\nimport { routeNames } from 'routes';\nimport Navbar from './Navbar';\nimport Card from './Card';\nimport Login from '../../components/Login/login';\nimport momochi from '../../assets/img/banner.png';\nimport './home.scss';\n\nconst Home = () => {\n\n  const { isLoggedIn } = useGetLoginInfo();\n  console.log(isLoggedIn);\n\n  const dispatch = useDispatch();\n  const { showLogin } = useContext();\n\n  function handleOnClickLogin() {\n    console.log('hola');\n    dispatch( {type: 'showLogin'});\n  }\n\n  function handleHideLogin() {\n    console.log('adios');\n    dispatch( {type: 'hideLogin'});\n  }\n\n  useEffect(() => {\n    dispatch({type: 'hideLogin'});\n  }, []);\n\n  return (\n    <div id='home'>\n      <Navbar/>\n      {/* <Login show={showLogin || false} onHide={handleHideLogin} /> */}\n      <div className='d-flex align-items-center justify-content-center home-content'>\n            <div className='col-sm' id='side-home'>\n                <div className='row center'>\n                    <img src={momochi} alt='title' className='banner'  />\n                    {/* <img src='img/title_stylized_reflection.png' alt='title' className='stylized-title-reflection' /> */}\n                </div>\n                <div className='row info'>\n                    <p>\n                    Momochi Sandayu is a 19 year old boy. His life is far from ordinary. He travels all over the world as a professional esports video game contender. He was living the absolute dream. But, this would all very much change soon enough…\n                    <br /><br />\n                    It was a normal day like any other. He slept in, and started playing his usual games in the afternoon. Suddenly his computer shuts down seemingly out of the blue. He had no idea what caused this. \n                    <br /><br />\n                    He disconnects all the cables and quickly travels to the store where he always takes his computer for repairs. When he arrived, to his disappointment there was a sign in the window. “Closed”. He immediately grabbed his phone to look for a new store. He found one not far from where he was about ten minutes away.\n                    </p>\n                </div>\n            </div>\n            <Card className='flex-shrink-0' />\n        </div>\n    </div>\n    // <div className='d-flex flex-fill align-items-center container'>\n    //   <div className='row w-100'>\n    //     <div className='col-12 col-md-8 col-lg-5 mx-auto'>\n    //       <div className='card shadow-sm rounded p-4 border-0'>\n    //         <div className='card-body text-center'>\n    //           <h2 className='mb-3' data-testid='title'>\n    //             {dAppName}\n    //           </h2>\n\n    //           <p className='mb-3'>\n    //             This is an Elrond dapp sample.\n    //             <br /> Login using your Elrond wallet.\n    //           </p>\n\n    //           <Link\n    //             to={routeNames.unlock}\n    //             className='btn btn-primary mt-3 text-white'\n    //             data-testid='loginBtn'\n    //           >\n    //             Login\n    //           </Link>\n    //         </div>\n    //       </div>\n    //     </div>\n    //   </div>\n    //   {/* <Card className='flex-shrink-0' /> */}\n    //   <div>\n    //   {isLoggedIn && (<p>Hola</p>)}\n    //   </div>\n    // </div>\n  );\n};\n\nexport default Home;\n","import * as React from 'react';\nimport { DappUI, useGetNetworkConfig } from '@elrondnetwork/dapp-core';\nimport { faCheck, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { useLocation, Link } from 'react-router-dom';\nimport { routeNames } from 'routes';\n\nconst Transaction = () => {\n  const { search } = useLocation();\n  const { network } = useGetNetworkConfig();\n\n  const query = new URLSearchParams(search);\n  const { status, txHash } = Object.fromEntries(query);\n\n  return status === 'success' ? (\n    <DappUI.PageState\n      icon={faCheck}\n      iconClass='fa-3x text-success'\n      className='dapp-icon icon-medium'\n      title='Transaction submitted successfully'\n      description={\n        <>\n          <p>\n            <a\n              href={`${network.explorerAddress}/transactions/${txHash}`}\n              {...{\n                target: '_blank'\n              }}\n              className='tx-link'\n              title='View in Explorer'\n            >\n              {txHash}\n            </a>\n          </p>\n          <Link to={routeNames.dashboard} className='btn btn-primary mt-3'>\n            Back to dashboard\n          </Link>\n        </>\n      }\n    />\n  ) : (\n    <DappUI.PageState\n      icon={faTimes}\n      iconClass='fa-3x text-danger'\n      className='dapp-icon icon-medium'\n      title='Error sending transaction'\n      description={\n        <>\n          <p>Try again</p>\n          <a href={routeNames.dashboard} className='btn btn-primary mt-3'>\n            Back to dashboard\n          </a>\n        </>\n      }\n    />\n  );\n};\n\nexport default Transaction;\n","import { dAppName } from 'config';\nimport withPageTitle from './components/PageTitle';\nimport Dashboard from './pages/Dashboard';\nimport Home from './pages/Home';\nimport Transaction from './pages/Transaction';\n\nexport const routeNames = {\n  home: '/',\n  dashboard: '/dashboard',\n  transaction: '/transaction',\n  unlock: '/unlock',\n  ledger: '/ledger',\n  walletconnect: '/walletconnect'\n};\n\nconst routes: Array<any> = [\n  {\n    path: routeNames.home,\n    title: 'Home',\n    component: Home\n  },\n  {\n    path: routeNames.dashboard,\n    title: 'Dashboard',\n    component: Dashboard,\n    authenticatedRoute: true\n  },\n  {\n    path: routeNames.transaction,\n    title: 'Transaction',\n    component: Transaction\n  }\n];\n\nconst mappedRoutes = routes.map((route) => {\n  const title = route.title\n    ? `${route.title} • Elrond ${dAppName}`\n    : `Elrond ${dAppName}`;\n\n  const requiresAuth = Boolean(route.authenticatedRoute);\n  const wrappedComponent = withPageTitle(title, route.component);\n\n  return {\n    path: route.path,\n    component: wrappedComponent,\n    authenticatedRoute: requiresAuth\n  };\n});\n\nexport default mappedRoutes;\n","import React from 'react';\nimport { projectName } from 'config';\nimport { ReactComponent as HeartIcon } from '../../../assets/img/heart.svg';\nimport './footer.scss';\nconst Footer = () => {\n  return (\n    <footer className='fixed-bottom text-center mt-2 mb-3 '>\n      <div>\n        <a\n          {...{\n            target: '_blank'\n          }}\n          className='d-flex align-items-center love '\n          href='https://elrond.com/'\n        >\n          Made with <HeartIcon className='mx-1' /> by {projectName}.\n        </a>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React from 'react';\nimport { AuthenticatedRoutesWrapper, useGetLoginInfo } from '@elrondnetwork/dapp-core';\nimport { useLocation } from 'react-router-dom';\nimport { useContext, useDispatch } from 'context';\nimport routes, { routeNames } from 'routes';\nimport Login from '../Login/login';\nimport Footer from './Footer';\nimport Navbar from './Navbar';\n\nconst Layout = ({ children }: { children: React.ReactNode }) => {\n  const { search } = useLocation();\n  const { isLoggedIn } = useGetLoginInfo();\n  const dispatch = useDispatch();\n  const { showLogin } = useContext();\n\n  function handleOnClickLogin() {\n    console.log('hola');\n    dispatch( {type: 'showLogin'});\n  }\n\n  function handleHideLogin() {\n    console.log('adios');\n    dispatch( {type: 'hideLogin'});\n  }\n  return (\n    <div className='bg-light d-flex flex-column flex-fill wrapper'>\n      {/* <Navbar onClickLogin={handleOnClickLogin}/> */}\n      <main className='d-flex flex-column flex-grow-1'>\n        <Login show={showLogin || false} onHide={handleHideLogin} />\n        <AuthenticatedRoutesWrapper\n          routes={routes}\n          unlockRoute={`${routeNames.unlock}${search}`}\n        >\n          {children}\n        </AuthenticatedRoutesWrapper>\n      </main>\n      <Footer />\n    </div>\n  );\n};\n\nexport default Layout;\n","import * as React from 'react';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { useLocation } from 'react-router-dom';\n\nconst PageNotFound = () => {\n  const { pathname } = useLocation();\n  return (\n    <div className='d-flex flex-fill align-items-center container home-content'>\n      <div className='row w-100'>\n        <div className='col-12 col-md-8 col-lg-5 mx-auto'>\n          <div className='card shadow-sm rounded p-4 border-0'>\n            <div className='card-body text-center d-flex flex-column justify-content-center'>\n              <div className='dapp-icon icon-medium'>\n                <FontAwesomeIcon\n                  icon={faSearch}\n                  className='mx-auto text-muted fa-3x mb-2'\n                />\n              </div>\n              <span className='h4 empty-heading mt-3'>Page not found</span>\n              <span className='empty-details'>{pathname}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PageNotFound;\n","import React from 'react';\nimport { DappUI, DappProvider } from '@elrondnetwork/dapp-core';\nimport { Route, Routes, BrowserRouter as Router } from 'react-router-dom';\nimport Layout from 'components/Layout';\nimport { environment } from 'config';\nimport { ContextProvider } from 'context';\nimport PageNotFound from 'pages/PageNotFound';\nimport { routeNames } from 'routes';\nimport routes from 'routes';\nimport '@elrondnetwork/dapp-core/build/index.css';\n\nconst {\n  TransactionsToastList,\n  SignTransactionsModals,\n  NotificationModal,\n  DappCorePages: { UnlockPage }\n} = DappUI;\n\nconst App = () => {\n  return (\n    <Router>\n      <DappProvider\n        environment={environment}\n        customNetworkConfig={{ name: 'customConfig', apiTimeout: 6000 }}\n        completedTransactionsDelay={200}\n      >\n        <ContextProvider>\n          <Layout>\n            <TransactionsToastList />\n            <NotificationModal />\n            <SignTransactionsModals className='custom-class-for-modals' />\n            <Routes>\n              <Route\n                path={routeNames.unlock}\n                element={<UnlockPage loginRoute={routeNames.dashboard} />}\n              />\n              {routes.map((route: any, index: number) => (\n                <Route\n                  path={route.path}\n                  key={'route-key-' + index}\n                  element={<route.component />}\n                />\n              ))}\n              <Route path='*' element={<PageNotFound />} />\n            </Routes>\n          </Layout>\n        </ContextProvider>\n      </DappProvider>\n    </Router>\n  );\n};\n\nexport default App;\n","import './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './assets/sass/theme.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}